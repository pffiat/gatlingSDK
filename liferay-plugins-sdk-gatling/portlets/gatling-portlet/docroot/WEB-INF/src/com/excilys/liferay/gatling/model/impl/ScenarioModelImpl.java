/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.excilys.liferay.gatling.model.impl;

import com.excilys.liferay.gatling.model.Scenario;
import com.excilys.liferay.gatling.model.ScenarioModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Scenario service. Represents a row in the &quot;GatlingTool_Scenario&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.excilys.liferay.gatling.model.ScenarioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScenarioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ScenarioImpl
 * @see com.excilys.liferay.gatling.model.Scenario
 * @see com.excilys.liferay.gatling.model.ScenarioModel
 * @generated
 */
public class ScenarioModelImpl extends BaseModelImpl<Scenario>
	implements ScenarioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scenario model instance should use the {@link com.excilys.liferay.gatling.model.Scenario} interface instead.
	 */
	public static final String TABLE_NAME = "GatlingTool_Scenario";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scenarioId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "urlSite", Types.VARCHAR },
			{ "group_id", Types.BIGINT },
			{ "simulationId", Types.BIGINT },
			{ "numberOfUsers", Types.BIGINT },
			{ "duration", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table GatlingTool_Scenario (scenarioId LONG not null primary key,name VARCHAR(75) null,urlSite VARCHAR(75) null,group_id LONG,simulationId LONG,numberOfUsers LONG,duration LONG)";
	public static final String TABLE_SQL_DROP = "drop table GatlingTool_Scenario";
	public static final String ORDER_BY_JPQL = " ORDER BY scenario.scenarioId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GatlingTool_Scenario.scenarioId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.excilys.liferay.gatling.model.Scenario"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.excilys.liferay.gatling.model.Scenario"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.excilys.liferay.gatling.model.Scenario"),
			true);
	public static long SIMULATIONID_COLUMN_BITMASK = 1L;
	public static long SCENARIOID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.excilys.liferay.gatling.model.Scenario"));

	public ScenarioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scenarioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScenarioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scenarioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Scenario.class;
	}

	@Override
	public String getModelClassName() {
		return Scenario.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scenarioId", getScenarioId());
		attributes.put("name", getName());
		attributes.put("urlSite", getUrlSite());
		attributes.put("group_id", getGroup_id());
		attributes.put("simulationId", getSimulationId());
		attributes.put("numberOfUsers", getNumberOfUsers());
		attributes.put("duration", getDuration());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scenarioId = (Long)attributes.get("scenarioId");

		if (scenarioId != null) {
			setScenarioId(scenarioId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String urlSite = (String)attributes.get("urlSite");

		if (urlSite != null) {
			setUrlSite(urlSite);
		}

		Long group_id = (Long)attributes.get("group_id");

		if (group_id != null) {
			setGroup_id(group_id);
		}

		Long simulationId = (Long)attributes.get("simulationId");

		if (simulationId != null) {
			setSimulationId(simulationId);
		}

		Long numberOfUsers = (Long)attributes.get("numberOfUsers");

		if (numberOfUsers != null) {
			setNumberOfUsers(numberOfUsers);
		}

		Long duration = (Long)attributes.get("duration");

		if (duration != null) {
			setDuration(duration);
		}
	}

	@Override
	public long getScenarioId() {
		return _scenarioId;
	}

	@Override
	public void setScenarioId(long scenarioId) {
		_scenarioId = scenarioId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getUrlSite() {
		if (_urlSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _urlSite;
		}
	}

	@Override
	public void setUrlSite(String urlSite) {
		_urlSite = urlSite;
	}

	@Override
	public long getGroup_id() {
		return _group_id;
	}

	@Override
	public void setGroup_id(long group_id) {
		_group_id = group_id;
	}

	@Override
	public long getSimulationId() {
		return _simulationId;
	}

	@Override
	public void setSimulationId(long simulationId) {
		_columnBitmask |= SIMULATIONID_COLUMN_BITMASK;

		if (!_setOriginalSimulationId) {
			_setOriginalSimulationId = true;

			_originalSimulationId = _simulationId;
		}

		_simulationId = simulationId;
	}

	public long getOriginalSimulationId() {
		return _originalSimulationId;
	}

	@Override
	public long getNumberOfUsers() {
		return _numberOfUsers;
	}

	@Override
	public void setNumberOfUsers(long numberOfUsers) {
		_numberOfUsers = numberOfUsers;
	}

	@Override
	public long getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(long duration) {
		_duration = duration;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Scenario.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Scenario toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Scenario)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScenarioImpl scenarioImpl = new ScenarioImpl();

		scenarioImpl.setScenarioId(getScenarioId());
		scenarioImpl.setName(getName());
		scenarioImpl.setUrlSite(getUrlSite());
		scenarioImpl.setGroup_id(getGroup_id());
		scenarioImpl.setSimulationId(getSimulationId());
		scenarioImpl.setNumberOfUsers(getNumberOfUsers());
		scenarioImpl.setDuration(getDuration());

		scenarioImpl.resetOriginalValues();

		return scenarioImpl;
	}

	@Override
	public int compareTo(Scenario scenario) {
		long primaryKey = scenario.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Scenario)) {
			return false;
		}

		Scenario scenario = (Scenario)obj;

		long primaryKey = scenario.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ScenarioModelImpl scenarioModelImpl = this;

		scenarioModelImpl._originalSimulationId = scenarioModelImpl._simulationId;

		scenarioModelImpl._setOriginalSimulationId = false;

		scenarioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Scenario> toCacheModel() {
		ScenarioCacheModel scenarioCacheModel = new ScenarioCacheModel();

		scenarioCacheModel.scenarioId = getScenarioId();

		scenarioCacheModel.name = getName();

		String name = scenarioCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			scenarioCacheModel.name = null;
		}

		scenarioCacheModel.urlSite = getUrlSite();

		String urlSite = scenarioCacheModel.urlSite;

		if ((urlSite != null) && (urlSite.length() == 0)) {
			scenarioCacheModel.urlSite = null;
		}

		scenarioCacheModel.group_id = getGroup_id();

		scenarioCacheModel.simulationId = getSimulationId();

		scenarioCacheModel.numberOfUsers = getNumberOfUsers();

		scenarioCacheModel.duration = getDuration();

		return scenarioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{scenarioId=");
		sb.append(getScenarioId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", urlSite=");
		sb.append(getUrlSite());
		sb.append(", group_id=");
		sb.append(getGroup_id());
		sb.append(", simulationId=");
		sb.append(getSimulationId());
		sb.append(", numberOfUsers=");
		sb.append(getNumberOfUsers());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.excilys.liferay.gatling.model.Scenario");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scenarioId</column-name><column-value><![CDATA[");
		sb.append(getScenarioId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlSite</column-name><column-value><![CDATA[");
		sb.append(getUrlSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>group_id</column-name><column-value><![CDATA[");
		sb.append(getGroup_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationId</column-name><column-value><![CDATA[");
		sb.append(getSimulationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfUsers</column-name><column-value><![CDATA[");
		sb.append(getNumberOfUsers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Scenario.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Scenario.class
		};
	private long _scenarioId;
	private String _name;
	private String _urlSite;
	private long _group_id;
	private long _simulationId;
	private long _originalSimulationId;
	private boolean _setOriginalSimulationId;
	private long _numberOfUsers;
	private long _duration;
	private long _columnBitmask;
	private Scenario _escapedModel;
}